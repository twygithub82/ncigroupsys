// <auto-generated />
using System;
using IDMS.UserAuthentication.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IDMS.UserAuthentication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714133640_AddSessionIdToUser")]
    partial class AddSessionIdToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.functions", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("action")
                        .HasColumnType("longtext");

                    b.Property<string>("code")
                        .HasColumnType("longtext");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("module")
                        .HasColumnType("longtext");

                    b.Property<string>("submodule")
                        .HasColumnType("longtext");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.HasKey("guid");

                    b.ToTable("functions");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.role", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("code")
                        .HasColumnType("longtext");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("department")
                        .HasColumnType("longtext");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("position")
                        .HasColumnType("longtext");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.HasKey("guid");

                    b.ToTable("role");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.role_functions", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("functions_guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role_guid")
                        .HasColumnType("longtext");

                    b.Property<string>("roleguid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.HasKey("guid");

                    b.HasIndex("functions_guid");

                    b.HasIndex("roleguid");

                    b.ToTable("role_functions");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.team", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("department_cv")
                        .HasColumnType("longtext");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.HasKey("guid");

                    b.ToTable("team");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.team_user", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("team_guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasColumnType("longtext");

                    b.HasKey("guid");

                    b.HasIndex("team_guid");

                    b.ToTable("team_user");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.user_role", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("create_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("create_dt")
                        .HasColumnType("bigint");

                    b.Property<long?>("delete_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("role_guid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("update_by")
                        .HasColumnType("longtext");

                    b.Property<long?>("update_dt")
                        .HasColumnType("bigint");

                    b.Property<string>("user_guid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("guid");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("IDMS.UserAuthentication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("CorporateID")
                        .HasColumnType("int");

                    b.Property<Guid?>("CurrentSessionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("isStaff")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e0df440-e0f4-4f35-8a2f-1ab2fc73218f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1",
                            CorporateID = 0,
                            Email = "admin@dwms.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@dwms.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEAv50U8yR/yGI1IWULZfG4weRGaDIfJHuAqbjhK5CTQJB2FxD6lkxDXsgC3ZMK4fyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            isStaff = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "acf0e0d5-b3f2-4554-a1eb-1edf734aa5f1",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "228be050-2b31-461e-9977-b3834f5cc431",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "6b5c08af-d46d-480a-8d20-2bdb4ceb098d",
                            ConcurrencyStamp = "3",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "aa80b889-00f2-47f3-a057-a43ae76d0a24",
                            ConcurrencyStamp = "3",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2e0df440-e0f4-4f35-8a2f-1ab2fc73218f",
                            RoleId = "acf0e0d5-b3f2-4554-a1eb-1edf734aa5f1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.role_functions", b =>
                {
                    b.HasOne("IDMS.User.Authentication.API.Models.Authentication.functions", "functions")
                        .WithMany("role_functions_new")
                        .HasForeignKey("functions_guid");

                    b.HasOne("IDMS.User.Authentication.API.Models.Authentication.role", "role")
                        .WithMany("role_functions")
                        .HasForeignKey("roleguid");

                    b.Navigation("functions");

                    b.Navigation("role");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.team_user", b =>
                {
                    b.HasOne("IDMS.User.Authentication.API.Models.Authentication.team", "team")
                        .WithMany()
                        .HasForeignKey("team_guid");

                    b.Navigation("team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IDMS.UserAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IDMS.UserAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDMS.UserAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IDMS.UserAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.functions", b =>
                {
                    b.Navigation("role_functions_new");
                });

            modelBuilder.Entity("IDMS.User.Authentication.API.Models.Authentication.role", b =>
                {
                    b.Navigation("role_functions");
                });
#pragma warning restore 612, 618
        }
    }
}
